generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isActive      Boolean  @default(true)

  currentCompanyId  String?

  accounts      Account[]
  sessions      Session[]
  roleId        String?
  role          Role?    @relation(fields: [roleId], references: [id])

  currentCompany    Company?      @relation("CurrentCompany", fields: [currentCompanyId], references: [id])
  companies         UserCompany[]

  @@index([email])
  @@index([roleId])
  @@map("users")
  @@index([currentCompanyId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  permissions RolePermission[]
  userCompanies UserCompany[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  resource    String
  action      String
  description String?
  createdAt   DateTime @default(now())

  roles       RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model RolePermission {
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model SyncLog {
  id            String   @id @default(cuid())
  source        String
  entityType    String
  externalId    String
  action        String
  status        String
  errorMessage  String?  @db.Text
  recordsBefore Int      @default(0)
  recordsAfter  Int      @default(0)
  duration      Int?
  metadata      Json?
  createdAt     DateTime @default(now())

  @@index([source, entityType])
  @@index([createdAt])
  @@map("sync_logs")
}

model SyncConfig {
  id              String   @id @default(cuid())
  source          String   @unique
  isEnabled       Boolean  @default(true)
  intervalMinutes Int      @default(30)
  lastSyncAt      DateTime?
  nextSyncAt      DateTime?
  errorCount      Int      @default(0)
  lastError       String?  @db.Text
  webhookUrl      String?
  webhookSecret   String?
  config          Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("sync_config")
}
// -----------------------------------------------------------------------------------------------------------------



// ============================================
// TABLA: CLIENTS (Sistema de Ventas)
// ============================================

model Client {
  id                        Int       @id @default(autoincrement())
  name                      String?   @db.Text
  birthday                  DateTime?
  email                     String?   @db.VarChar(255) // Cambiado de Text a VarChar para permitir índice
  address                   String?   @db.Text
  birthplace                String?   @db.Text
  curp                      String?   @db.VarChar(255) // Cambiado de Text a VarChar para permitir índice
  electorKey                String?   @map("elector_key") @db.Text
  mobile                    String?   @db.Text
  phone                     String?   @db.Text
  fLastname                 String?   @map("f_lastname") @db.Text
  mLastname                 String?   @map("m_lastname") @db.Text
  state                     String?   @db.Text
  maritalStatus             Int?      @map("marital_status")
  maritalRegistry           Int?      @map("marital_registry")
  street                    String?   @db.Text
  interiorNumber            String?   @map("interior_number") @db.Text
  externalNumber            String?   @map("external_number") @db.Text
  suburb                    String?   @db.Text
  postalCode                String?   @map("postal_code") @db.Text
  municipality              String?   @db.Text
  near                      String?   @db.Text
  
  // Datos de la empresa
  companyName               String?   @map("company_name") @db.Text
  companyStreet             String?   @map("company_street") @db.Text
  companyExternalNumber     String?   @map("company_external_number") @db.Text
  companyInteriorNumber     String?   @map("company_interior_number") @db.Text
  companySuburb             String?   @map("company_suburb") @db.Text
  companyPostalCode         String?   @map("company_postal_code") @db.Text
  companyPhone              String?   @map("company_phone") @db.Text
  companyMunicipality       String?   @map("company_municipality") @db.Text
  companyState              String?   @map("company_state") @db.Text
  companyNear               String?   @map("company_near") @db.Text
  companyMobile             String?   @map("company_mobile") @db.Text
  job                       String?   @db.Text
  antiquity                 String?   @db.Text
  monthlyIncome             BigInt?   @map("monthly_income")
  additionalIncome          BigInt?   @map("additional_income")
  fixedCosts                Int?      @map("fixed_costs")
  bank                      String?   @db.Text
  gender                    String?   @db.Text
  affiliationNumber         String?   @map("affiliation_number") @db.Text
  rfc                       String?   @db.Text
  isRented                  String?   @map("is_rented") @db.Text
  timeRented                String?   @map("time_rented") @db.Text
  monthlyRent               Int?      @map("monthly_rent")
  birthState                String?   @map("birth_state") @db.Text
  isForeign                 Boolean?  @map("is_foreign")
  createdBy                 Int?      @map("created_by")
  workForeign               Boolean?  @map("work_foreign")
  companyRfc                String?   @map("company_rfc") @db.Text
  businessName              String?   @map("business_name") @db.Text
  adquisition               String?   @db.Text
  companyBussiness          String?   @map("company_bussiness") @db.Text
  maritalRegimen            Int?      @map("marital_regimen")
  workingTimeStart          DateTime? @map("working_time_start") @db.Time
  workingTimeEnd            DateTime? @map("working_time_end") @db.Time
  location                  String?   @db.Text
  credit                    String?   @db.Text
  creditType                String?   @map("credit_type") @db.Text
  passport                  String?   @db.Text
  ineNumber                 String?   @map("ine_number") @db.Text
  user                      Int?
  
  // Timestamps
  createdAt                 DateTime? @map("created_at")
  updatedAt                 DateTime? @map("updated_at")
  
  // Campos adicionales
  companyBusiness           String?   @map("company_business") @db.VarChar(255)
  beneficiary               Int?
  completionDate            DateTime? @map("completion_date")
  clientStatus              Int?      @map("client_status")
  idmex                     String?   @db.VarChar(255)
  whatsappNumberId          String?   @map("whatsapp_number_id") @db.VarChar(255)
  whatsappRecipientNumber   String?   @map("whatsapp_recipient_number") @db.VarChar(255)
  messengerConversationId   String?   @map("messenger_conversation_id") @db.VarChar(255)
  messengerRecipientId      String?   @map("messenger_recipient_id") @db.VarChar(255)
  campaing                  Int?
  externalId                String?   @map("external_id") @db.VarChar(255)
  campaignFormDate          DateTime? @map("campaign_form_date")
  instagramId               String?   @map("instagram_id") @db.VarChar(255)
  lastContact               DateTime? @map("last_contact")
  changePhaseDate           DateTime? @map("change_phase_date")
  lastPhipipelinePhase      String?   @map("last_phipeline_phase") @db.VarChar(255)
  assignedAt                DateTime? @map("assigned_at")
  movePhaseBy               Int?      @map("move_phase_by")
  nationality               String?   @db.VarChar(255)
  
  @@map("clients")
  @@index([email])
  @@index([curp])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([clientStatus])
}

// ============================================
// MÓDULO: SINCRONIZACIÓN
// ============================================

model WebhookConfig {
  id              String    @id @default(cuid())
  tabla           String    @unique
  nombre          String
  categoria       String
  icono           String?
  color           String
  isEnabled       Boolean   @default(true)
  webhookUrl      String?
  webhookSecret   String?
  intervalMinutes Int       @default(30)
  lastSyncAt      DateTime?
  nextSyncAt      DateTime?
  totalSyncs      Int       @default(0)
  successSyncs    Int       @default(0)
  errorSyncs      Int       @default(0)
  lastError       String?   @db.Text
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  logs            WebhookSyncLog[]
  
  @@index([categoria])
  @@index([isEnabled])
  @@map("webhook_configs")
}

model WebhookSyncLog {
  id               String        @id @default(cuid())
  configId         String
  config           WebhookConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  
  status           String
  action           String
  recordsReceived  Int           @default(0)
  recordsInserted  Int           @default(0)
  recordsUpdated   Int           @default(0)
  recordsDuplicate Int           @default(0)
  recordsErrors    Int           @default(0)
  
  duration         Int?
  errorMessage     String?       @db.Text
  requestPayload   Json?
  responseData     Json?
  
  createdAt        DateTime      @default(now())
  
  @@index([configId])
  @@index([status])
  @@index([createdAt])
  @@map("webhook_sync_logs")
}
// ============================================
// SISTEMA MULTIEMPRESA
// ============================================
// AGREGAR ESTOS MODELOS AL SCHEMA EXISTENTE

// ============================================
// TABLA: COMPANIES (Empresas del sistema)
// ============================================
model Company {
  id            String   @id @default(cuid())
  name          String   @unique
  slug          String   @unique
  displayName   String
  logo          String?
  primaryColor  String   @default("#E53E3E")
  filterValue   String?
  filterMode    String   @default("equals")
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  users             UserCompany[]
  currentForUsers   User[]        @relation("CurrentCompany")  
  
  @@map("companies")
  @@index([slug])
  @@index([isActive])
}

// ============================================
// TABLA: USER_COMPANIES (Relación Usuario-Empresa)
// ============================================
model UserCompany {
  id          String   @id @default(cuid())
  userId      String
  companyId   String
  
  // Permisos específicos por empresa (opcional)
  roleId      String?  // Puede tener diferente rol en cada empresa
  
  // Control de acceso
  canAccess   Boolean  @default(true)
  
  // Timestamps
  assignedAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  role        Role?    @relation(fields: [roleId], references: [id])
  
  @@unique([userId, companyId])
  @@map("user_companies")
  @@index([userId])
  @@index([companyId])
}

